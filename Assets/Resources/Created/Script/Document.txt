Key set up:

WASD: Movement
Q: Gem related
E: interaction
R: put in inventory
Z: scale up
X: scale down 
C: Change rotational mode
V, B: rotation
Number key: Get things from inventory

----------------------------------------
RegidedValue:

pickUpScale: default 1
pickUpDistance: default 20
minimumDistance: default 0.5
maximumDistance: default  1.5

----------------------------------------
Groups:

pickUpAble: things can be picked up
cutable: things can be cutted
cutted: things that have been cut

----------------------------------------
How our core mechanism function

1, It will cut one object group (one object tree) inside the cube
2, if there are multiple object group, it will randomly select a group to cut
3, to delete a duplicated object, just put the gem on one part of that object. the WHOLE object group will be deleted
4, if there are multiple duplicated object group in one gem, it will randomly cut one object group
5, if there are object can be cut and duplicated object in one gem, it will perfer to cut the object insteat of delete object

----------------------------------------
Pickup System:

What value it used

----------------------------------------
Cutted System:

1, Rotation System:
	Use C to change mode, V to rotate forward and B to rotate backward
	The rotation effect stays on the object and will not be cancled after putted in the inventory
	The rotation speed is determind by the "rotationSpeed", usually 

----------------------------------------
Player Status:


----------------------------------------
Event System:
This is a centralized system that can let multiple scripts and object response to one trigger. For example, when the player want to 
stop the game, the stop can issue an "event" to event manager and event manager will tell all the scripts that listen to this event 
player has stop the game.

In order to create a event. You need to
1, Register this event by adding the event name to the enum of PublicMethods.TypeOfEvent
2, After register this event, you need to create a method in your script that you want to do when this event happened. Using the 
previous example, when player stop the game, the wind mill will stop rotate. Then you need to create a method in the script that
controls the wind mill to let it stop. Note: this method must take a EventInfo as a parameter
3, listen to the event by calling EventManager.startListen(type in step 1, the methods's in step 2)
4, Then you need to create a children class in EventInfo, and use "your eventInfo : EventInfo" as decoration. This is the information
that the trigger script want to give. For example, the player want to stop the car, then the you can put "car" in the eventInfo when trigger 
the event. Then all the method triggered will know you want to stop the car.
5, To trigger a event, like player press "stop" in the UI. Then the UI script will call EventManager.triggerEvent()
6, Then the EventManager will call all the listening method and give the eventInfo to each script

refer to ./Testing Script/Eventsystem/TestTrigger and ./Testing Script/Eventsystem/TestEventListen for an example
----------------------------------------
----------------------------------------
----------------------------------------
----------------------------------------
Brief introduction to each file. Detailed descriptions are included in that file

CuttedObject:
-provide funtionality and track objects that have been cut.

energyDetector:
-calcutate the energy strenghth to guide the player to where he can explore

EventInfo, EventManager:
-event system

HandSlot:
-TODO:Roland need to add here

holdCuttedObject:
-hold and move (closer an farther, rotate) the object cutted by us
-interact with the inventory to take out and put in.
-put down the object.

identifier:
-add, remove, check the group, tag, parameter information (regidit values) of objects.

inventory:
-the inventory system.
-put in, take out pickUpObjects and cuttedObjects.
-interacts with pickUpObject.cs and placeGem.cs

lockSpace:
-cut an object

pickUpObject:
-pick up or put down an normal object (not cuttedObject that created after we cut an object)
-interact with inventory system to put in or take out

placeGem:
-generate the transparent magic cube player use to cut other objects.

player_status:
-staus of the player (hand)

FirstPersonController:
	FOVkick: how the field of view changes when player is running
	MouseLook: enable or disable the cursor and calculate the rotation of the camera
	headBob: iterator to control the temporary movements
	lerpbob: movement of the head when landing